# SecureNet Enterprise Pilot Deployment Configuration
# Production-ready configuration for mid-market client testing

apiVersion: v1
kind: ConfigMap
metadata:
  name: securenet-pilot-config
  namespace: securenet-pilot
data:
  # Application Configuration
  app.yaml: |
    # SecureNet Pilot Application Configuration
    application:
      name: "SecureNet Enterprise Pilot"
      version: "2.0.0-pilot"
      environment: "pilot"
      debug: false
      
    # Database Configuration
    database:
      type: "postgresql"
      host: "securenet-pilot-postgres"
      port: 5432
      name: "securenet_pilot"
      username: "securenet_pilot"
      password_secret: "securenet-pilot-db-secret"
      ssl_mode: "require"
      max_connections: 50
      connection_timeout: 30
      
    # Redis Configuration
    redis:
      host: "securenet-pilot-redis"
      port: 6379
      password_secret: "securenet-pilot-redis-secret"
      database: 0
      max_connections: 20
      
    # Security Configuration
    security:
      jwt_secret: "securenet-pilot-jwt-secret"
      encryption_key: "securenet-pilot-encryption-secret"
      mfa_required_roles: ["platform_owner", "security_admin"]
      session_timeout: 3600
      max_login_attempts: 5
      lockout_duration: 1800
      
    # Monitoring Configuration
    monitoring:
      prometheus_enabled: true
      metrics_port: 9090
      health_check_port: 8080
      log_level: "INFO"
      
    # Multi-tenant Configuration
    multi_tenant:
      enabled: true
      default_organization: "pilot-org"
      data_isolation: true
      resource_limits:
        max_users_per_org: 100
        max_devices_per_org: 1000
        max_scans_per_day: 50

  # Pilot-specific Environment Variables
  pilot.env: |
    # Pilot Environment Configuration
    SECURENET_MODE=pilot
    SECURENET_ORGANIZATION=pilot-client
    SECURENET_TIER=enterprise
    
    # Feature Flags
    FEATURE_ADVANCED_ANALYTICS=true
    FEATURE_COMPLIANCE_REPORTING=true
    FEATURE_CUSTOM_DASHBOARDS=true
    FEATURE_API_ACCESS=true
    FEATURE_SSO_INTEGRATION=true
    
    # Resource Limits
    MAX_CONCURRENT_SCANS=10
    MAX_DATA_RETENTION_DAYS=365
    MAX_ALERT_RULES=50
    
    # Integration Settings
    SLACK_INTEGRATION_ENABLED=true
    EMAIL_NOTIFICATIONS_ENABLED=true
    WEBHOOK_NOTIFICATIONS_ENABLED=true
    
    # Compliance Settings
    AUDIT_LOGGING_ENABLED=true
    DATA_ENCRYPTION_ENABLED=true
    BACKUP_ENABLED=true
    BACKUP_RETENTION_DAYS=90

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: securenet-pilot-app
  namespace: securenet-pilot
  labels:
    app: securenet-pilot
    component: application
spec:
  replicas: 2
  selector:
    matchLabels:
      app: securenet-pilot
      component: application
  template:
    metadata:
      labels:
        app: securenet-pilot
        component: application
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: securenet-app
        image: securenet/enterprise:2.0.0-pilot
        ports:
        - containerPort: 8000
          name: http
        - containerPort: 9090
          name: metrics
        env:
        - name: SECURENET_CONFIG
          value: "/config/app.yaml"
        envFrom:
        - configMapRef:
            name: securenet-pilot-config
        - secretRef:
            name: securenet-pilot-secrets
        volumeMounts:
        - name: config
          mountPath: /config
        - name: secrets
          mountPath: /secrets
          readOnly: true
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config
        configMap:
          name: securenet-pilot-config
      - name: secrets
        secret:
          secretName: securenet-pilot-secrets

---
apiVersion: v1
kind: Service
metadata:
  name: securenet-pilot-service
  namespace: securenet-pilot
  labels:
    app: securenet-pilot
spec:
  selector:
    app: securenet-pilot
    component: application
  ports:
  - name: http
    port: 80
    targetPort: 8000
  - name: metrics
    port: 9090
    targetPort: 9090
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: securenet-pilot-ingress
  namespace: securenet-pilot
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/rate-limit: "100"
spec:
  tls:
  - hosts:
    - pilot.securenet.ai
    secretName: securenet-pilot-tls
  rules:
  - host: pilot.securenet.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: securenet-pilot-service
            port:
              number: 80

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: securenet-pilot-postgres
  namespace: securenet-pilot
spec:
  serviceName: securenet-pilot-postgres
  replicas: 1
  selector:
    matchLabels:
      app: securenet-pilot-postgres
  template:
    metadata:
      labels:
        app: securenet-pilot-postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          value: "securenet_pilot"
        - name: POSTGRES_USER
          value: "securenet_pilot"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: securenet-pilot-db-secret
              key: password
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          allowPrivilegeEscalation: false
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi

---
apiVersion: v1
kind: Service
metadata:
  name: securenet-pilot-postgres
  namespace: securenet-pilot
spec:
  selector:
    app: securenet-pilot-postgres
  ports:
  - port: 5432
    targetPort: 5432
  clusterIP: None

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: securenet-pilot-redis
  namespace: securenet-pilot
spec:
  replicas: 1
  selector:
    matchLabels:
      app: securenet-pilot-redis
  template:
    metadata:
      labels:
        app: securenet-pilot-redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        command:
        - redis-server
        - --requirepass
        - $(REDIS_PASSWORD)
        - --appendonly
        - "yes"
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: securenet-pilot-redis-secret
              key: password
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-data
          mountPath: /data
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          allowPrivilegeEscalation: false
      volumes:
      - name: redis-data
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: securenet-pilot-redis
  namespace: securenet-pilot
spec:
  selector:
    app: securenet-pilot-redis
  ports:
  - port: 6379
    targetPort: 6379

---
apiVersion: v1
kind: Secret
metadata:
  name: securenet-pilot-secrets
  namespace: securenet-pilot
type: Opaque
data:
  # Base64 encoded secrets (replace with actual values)
  jwt_secret: c2VjdXJlbmV0LXBpbG90LWp3dC1zZWNyZXQ=
  encryption_key: c2VjdXJlbmV0LXBpbG90LWVuY3J5cHRpb24ta2V5
  database_password: c2VjdXJlbmV0LXBpbG90LWRiLXBhc3N3b3Jk
  redis_password: c2VjdXJlbmV0LXBpbG90LXJlZGlzLXBhc3N3b3Jk

---
apiVersion: v1
kind: Secret
metadata:
  name: securenet-pilot-db-secret
  namespace: securenet-pilot
type: Opaque
data:
  password: c2VjdXJlbmV0LXBpbG90LWRiLXBhc3N3b3Jk

---
apiVersion: v1
kind: Secret
metadata:
  name: securenet-pilot-redis-secret
  namespace: securenet-pilot
type: Opaque
data:
  password: c2VjdXJlbmV0LXBpbG90LXJlZGlzLXBhc3N3b3Jk

---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: securenet-pilot-monitor
  namespace: securenet-pilot
  labels:
    app: securenet-pilot
spec:
  selector:
    matchLabels:
      app: securenet-pilot
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: securenet-pilot-alerts
  namespace: securenet-pilot
data:
  alerts.yaml: |
    groups:
    - name: securenet-pilot-alerts
      rules:
      - alert: SecureNetPilotDown
        expr: up{job="securenet-pilot"} == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "SecureNet Pilot is down"
          description: "SecureNet Pilot has been down for more than 1 minute"
          
      - alert: SecureNetPilotHighErrorRate
        expr: rate(securenet_http_requests_total{status=~"5.."}[5m]) > 0.1
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High error rate in SecureNet Pilot"
          description: "Error rate is {{ $value }} errors per second"
          
      - alert: SecureNetPilotHighMemoryUsage
        expr: securenet_memory_usage_percent > 80
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High memory usage in SecureNet Pilot"
          description: "Memory usage is {{ $value }}%"
          
      - alert: SecureNetPilotSecurityIncident
        expr: securenet_security_incidents_total > 0
        for: 0s
        labels:
          severity: critical
        annotations:
          summary: "Security incident detected in SecureNet Pilot"
          description: "{{ $value }} security incidents detected"

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: securenet-pilot-backup
  namespace: securenet-pilot
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: backup
            image: postgres:15-alpine
            command:
            - /bin/sh
            - -c
            - |
              pg_dump -h securenet-pilot-postgres -U securenet_pilot -d securenet_pilot > /backup/securenet-pilot-$(date +%Y%m%d).sql
              # Upload to cloud storage (implement based on cloud provider)
            env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: securenet-pilot-db-secret
                  key: password
            volumeMounts:
            - name: backup-storage
              mountPath: /backup
          volumes:
          - name: backup-storage
            persistentVolumeClaim:
              claimName: securenet-pilot-backup-pvc
          restartPolicy: OnFailure

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: securenet-pilot-backup-pvc
  namespace: securenet-pilot
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: securenet-pilot-network-policy
  namespace: securenet-pilot
spec:
  podSelector:
    matchLabels:
      app: securenet-pilot
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8000
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: securenet-pilot-postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: securenet-pilot-redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []  # Allow external traffic for API calls, etc.
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80 
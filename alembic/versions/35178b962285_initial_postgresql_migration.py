"""Initial PostgreSQL migration

Revision ID: 35178b962285
Revises: 
Create Date: 2025-06-16 18:27:15.191868

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '35178b962285'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('system_logs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('organization_id', sa.UUID(), nullable=True),
    sa.Column('level', sa.String(length=20), nullable=False),
    sa.Column('category', sa.String(length=50), nullable=True),
    sa.Column('source', sa.String(length=100), nullable=True),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('additional_data', sa.JSON(), nullable=True),
    sa.Column('stack_trace', sa.Text(), nullable=True),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_log_category', 'system_logs', ['category'], unique=False)
    op.create_index('idx_log_level', 'system_logs', ['level'], unique=False)
    op.create_index('idx_log_org_id', 'system_logs', ['organization_id'], unique=False)
    op.create_index('idx_log_source', 'system_logs', ['source'], unique=False)
    op.create_index('idx_log_timestamp', 'system_logs', ['timestamp'], unique=False)
    op.create_table('threat_detections',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('organization_id', sa.UUID(), nullable=False),
    sa.Column('threat_type', sa.String(length=50), nullable=False),
    sa.Column('severity', sa.Enum('LOW', 'MEDIUM', 'HIGH', 'CRITICAL', name='threatseverity'), nullable=False),
    sa.Column('confidence', sa.Float(), nullable=False),
    sa.Column('source_ip', sa.String(length=45), nullable=True),
    sa.Column('target_ip', sa.String(length=45), nullable=True),
    sa.Column('source_port', sa.Integer(), nullable=True),
    sa.Column('target_port', sa.Integer(), nullable=True),
    sa.Column('protocol', sa.String(length=20), nullable=True),
    sa.Column('detection_method', sa.String(length=50), nullable=True),
    sa.Column('ml_model_version', sa.String(length=50), nullable=True),
    sa.Column('rule_id', sa.String(length=100), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('analysis_results', sa.JSON(), nullable=True),
    sa.Column('false_positive', sa.Boolean(), nullable=True),
    sa.Column('detected_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('resolved_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_threat_detected', 'threat_detections', ['detected_at'], unique=False)
    op.create_index('idx_threat_org_id', 'threat_detections', ['organization_id'], unique=False)
    op.create_index('idx_threat_severity', 'threat_detections', ['severity'], unique=False)
    op.create_index('idx_threat_source_ip', 'threat_detections', ['source_ip'], unique=False)
    op.create_index('idx_threat_target_ip', 'threat_detections', ['target_ip'], unique=False)
    op.create_index('idx_threat_type', 'threat_detections', ['threat_type'], unique=False)
    op.create_table('audit_logs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('organization_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('action', sa.String(length=100), nullable=False),
    sa.Column('resource_type', sa.String(length=50), nullable=True),
    sa.Column('resource_id', sa.String(length=255), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('request_method', sa.String(length=10), nullable=True),
    sa.Column('request_path', sa.String(length=500), nullable=True),
    sa.Column('details', sa.JSON(), nullable=True),
    sa.Column('success', sa.Boolean(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_audit_action', 'audit_logs', ['action'], unique=False)
    op.create_index('idx_audit_org_id', 'audit_logs', ['organization_id'], unique=False)
    op.create_index('idx_audit_resource', 'audit_logs', ['resource_type', 'resource_id'], unique=False)
    op.create_index('idx_audit_timestamp', 'audit_logs', ['timestamp'], unique=False)
    op.create_index('idx_audit_user_id', 'audit_logs', ['user_id'], unique=False)
    op.drop_index(op.f('idx_billing_usage_month'), table_name='billing_usage')
    op.drop_index(op.f('idx_billing_usage_org_id'), table_name='billing_usage')
    op.drop_table('billing_usage')
    op.drop_index(op.f('idx_org_users_org_id'), table_name='org_users')
    op.drop_index(op.f('idx_org_users_user_id'), table_name='org_users')
    op.drop_table('org_users')
    op.drop_table('user_sessions')
    op.drop_index(op.f('idx_traffic_org_id'), table_name='network_traffic')
    op.drop_index(op.f('idx_traffic_protocol'), table_name='network_traffic')
    op.drop_index(op.f('idx_traffic_timestamp'), table_name='network_traffic')
    op.drop_table('network_traffic')
    op.drop_table('cve_data')
    op.drop_index(op.f('idx_device_vulnerabilities_org_id'), table_name='device_vulnerabilities')
    op.drop_table('device_vulnerabilities')
    op.drop_index(op.f('idx_logs_category'), table_name='logs')
    op.drop_index(op.f('idx_logs_level'), table_name='logs')
    op.drop_index(op.f('idx_logs_org_id'), table_name='logs')
    op.drop_index(op.f('idx_logs_source'), table_name='logs')
    op.drop_index(op.f('idx_logs_timestamp'), table_name='logs')
    op.drop_table('logs')
    op.drop_table('settings')
    op.drop_table('tenants')
    op.drop_index(op.f('idx_ml_training_sessions_org_id'), table_name='ml_training_sessions')
    op.drop_table('ml_training_sessions')
    op.drop_index(op.f('idx_anomalies_org_id'), table_name='anomalies')
    op.drop_index(op.f('idx_anomalies_severity'), table_name='anomalies')
    op.drop_index(op.f('idx_anomalies_status'), table_name='anomalies')
    op.drop_index(op.f('idx_anomalies_timestamp'), table_name='anomalies')
    op.drop_index(op.f('idx_anomalies_type'), table_name='anomalies')
    op.drop_table('anomalies')
    op.drop_table('user_activity_log')
    op.drop_table('network_connections')
    op.add_column('ml_models', sa.Column('version', sa.String(length=50), nullable=False))
    op.add_column('ml_models', sa.Column('model_type', sa.String(length=50), nullable=False))
    op.add_column('ml_models', sa.Column('precision', sa.Float(), nullable=True))
    op.add_column('ml_models', sa.Column('recall', sa.Float(), nullable=True))
    op.add_column('ml_models', sa.Column('f1_score', sa.Float(), nullable=True))
    op.add_column('ml_models', sa.Column('mlflow_run_id', sa.String(length=255), nullable=True))
    op.add_column('ml_models', sa.Column('mlflow_model_uri', sa.String(length=500), nullable=True))
    op.add_column('ml_models', sa.Column('hyperparameters', sa.JSON(), nullable=True))
    op.add_column('ml_models', sa.Column('training_data_info', sa.JSON(), nullable=True))
    op.add_column('ml_models', sa.Column('metrics', sa.JSON(), nullable=True))
    op.add_column('ml_models', sa.Column('trained_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('ml_models', sa.Column('deployed_at', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('ml_models', 'id',
               existing_type=sa.TEXT(),
               type_=sa.UUID(),
               nullable=False)
    op.alter_column('ml_models', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(length=100),
               existing_nullable=False)
    op.alter_column('ml_models', 'status',
               existing_type=sa.TEXT(),
               type_=sa.String(length=20),
               nullable=True,
               existing_server_default=sa.text("'training'"))
    op.alter_column('ml_models', 'accuracy',
               existing_type=sa.REAL(),
               type_=sa.Float(),
               existing_nullable=True)
    op.alter_column('ml_models', 'created_at',
               existing_type=sa.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.drop_index(op.f('idx_ml_models_org_id'), table_name='ml_models')
    op.create_index('idx_model_name_version', 'ml_models', ['name', 'version'], unique=False)
    op.create_index('idx_model_status', 'ml_models', ['status'], unique=False)
    op.create_index('idx_model_type', 'ml_models', ['model_type'], unique=False)
    op.create_unique_constraint('uq_model_name_version', 'ml_models', ['name', 'version'])
    op.drop_column('ml_models', 'type')
    op.drop_column('ml_models', 'updated_at')
    op.drop_column('ml_models', 'organization_id')
    op.add_column('network_devices', sa.Column('vendor', sa.String(length=100), nullable=True))
    op.add_column('network_devices', sa.Column('model', sa.String(length=100), nullable=True))
    op.add_column('network_devices', sa.Column('os_info', sa.String(length=255), nullable=True))
    op.add_column('network_devices', sa.Column('is_online', sa.Boolean(), nullable=True))
    op.add_column('network_devices', sa.Column('response_time', sa.Float(), nullable=True))
    op.add_column('network_devices', sa.Column('open_ports', sa.JSON(), nullable=True))
    op.add_column('network_devices', sa.Column('services', sa.JSON(), nullable=True))
    op.add_column('network_devices', sa.Column('vulnerabilities', sa.JSON(), nullable=True))
    op.add_column('network_devices', sa.Column('risk_score', sa.Integer(), nullable=True))
    op.alter_column('network_devices', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.UUID(),
               nullable=False)
    op.alter_column('network_devices', 'organization_id',
               existing_type=sa.TEXT(),
               type_=sa.UUID(),
               nullable=False)
    op.alter_column('network_devices', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=True)
    op.alter_column('network_devices', 'ip_address',
               existing_type=sa.TEXT(),
               type_=sa.String(length=45),
               nullable=False)
    op.alter_column('network_devices', 'mac_address',
               existing_type=sa.TEXT(),
               type_=sa.String(length=17),
               existing_nullable=True)
    op.alter_column('network_devices', 'device_type',
               existing_type=sa.TEXT(),
               type_=sa.String(length=50),
               existing_nullable=True)
    op.alter_column('network_devices', 'status',
               existing_type=sa.TEXT(),
               type_=sa.String(length=20),
               existing_nullable=True)
    op.alter_column('network_devices', 'last_seen',
               existing_type=sa.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('network_devices', 'created_at',
               existing_type=sa.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.alter_column('network_devices', 'updated_at',
               existing_type=sa.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.drop_index(op.f('idx_devices_org_id'), table_name='network_devices')
    op.drop_index(op.f('idx_devices_status'), table_name='network_devices')
    op.drop_index(op.f('idx_devices_type'), table_name='network_devices')
    op.create_index('idx_device_ip', 'network_devices', ['ip_address'], unique=False)
    op.create_index('idx_device_mac', 'network_devices', ['mac_address'], unique=False)
    op.create_index('idx_device_org_id', 'network_devices', ['organization_id'], unique=False)
    op.create_index('idx_device_status', 'network_devices', ['status'], unique=False)
    op.create_unique_constraint('uq_org_device_ip', 'network_devices', ['organization_id', 'ip_address'])
    op.create_foreign_key(None, 'network_devices', 'organizations', ['organization_id'], ['id'])
    op.drop_column('network_devices', 'type')
    op.drop_column('network_devices', 'metadata')
    op.drop_column('network_devices', 'org_id')
    op.drop_column('network_devices', 'hostname')
    op.add_column('notifications', sa.Column('is_read', sa.Boolean(), nullable=True))
    op.add_column('notifications', sa.Column('additional_data', sa.JSON(), nullable=True))
    op.add_column('notifications', sa.Column('action_url', sa.String(length=500), nullable=True))
    op.add_column('notifications', sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('notifications', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.UUID(),
               nullable=False)
    op.alter_column('notifications', 'organization_id',
               existing_type=sa.TEXT(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('notifications', 'title',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.alter_column('notifications', 'category',
               existing_type=sa.TEXT(),
               type_=sa.String(length=50),
               nullable=True,
               existing_server_default=sa.text("'system'"))
    op.alter_column('notifications', 'severity',
               existing_type=sa.TEXT(),
               type_=sa.String(length=20),
               nullable=True,
               existing_server_default=sa.text("'info'"))
    op.alter_column('notifications', 'read_at',
               existing_type=sa.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('notifications', 'created_at',
               existing_type=sa.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.drop_index(op.f('idx_notifications_org_id'), table_name='notifications')
    op.drop_index(op.f('idx_notifications_user_id'), table_name='notifications')
    op.create_index('idx_notification_category', 'notifications', ['category'], unique=False)
    op.create_index('idx_notification_created', 'notifications', ['created_at'], unique=False)
    op.create_index('idx_notification_org_id', 'notifications', ['organization_id'], unique=False)
    op.create_index('idx_notification_unread', 'notifications', ['is_read', 'created_at'], unique=False)
    op.create_index('idx_notification_user_id', 'notifications', ['user_id'], unique=False)
    op.create_foreign_key(None, 'notifications', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'notifications', 'organizations', ['organization_id'], ['id'])
    op.drop_column('notifications', 'read')
    op.drop_column('notifications', 'metadata')
    op.alter_column('organizations', 'id',
               existing_type=sa.TEXT(),
               type_=sa.UUID(),
               nullable=False)
    op.alter_column('organizations', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.alter_column('organizations', 'owner_email',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.alter_column('organizations', 'status',
               existing_type=sa.TEXT(),
               type_=sa.Enum('ACTIVE', 'SUSPENDED', 'TRIAL', 'EXPIRED', name='organizationstatus'),
               nullable=True,
               existing_server_default=sa.text("'trial'"))
    op.alter_column('organizations', 'plan_type',
               existing_type=sa.TEXT(),
               type_=sa.Enum('FREE', 'PRO', 'ENTERPRISE', name='plantype'),
               nullable=True,
               existing_server_default=sa.text("'free'"))
    op.alter_column('organizations', 'api_key',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.alter_column('organizations', 'created_at',
               existing_type=sa.TEXT(),
               type_=sa.DateTime(timezone=True),
               nullable=True)
    op.alter_column('organizations', 'updated_at',
               existing_type=sa.TEXT(),
               type_=sa.DateTime(timezone=True),
               nullable=True)
    op.drop_index(op.f('idx_organizations_api_key'), table_name='organizations')
    op.drop_index(op.f('idx_organizations_owner_email'), table_name='organizations')
    op.create_index('idx_org_api_key', 'organizations', ['api_key'], unique=False)
    op.create_index('idx_org_status', 'organizations', ['status'], unique=False)
    op.drop_column('organizations', 'stripe_customer_id')
    op.drop_column('organizations', 'billing_email')
    op.drop_column('organizations', 'stripe_subscription_id')
    op.drop_column('organizations', 'trial_ends_at')
    op.add_column('security_findings', sa.Column('device_id', sa.UUID(), nullable=True))
    op.add_column('security_findings', sa.Column('finding_type', sa.String(length=50), nullable=False))
    op.add_column('security_findings', sa.Column('title', sa.String(length=255), nullable=False))
    op.add_column('security_findings', sa.Column('port', sa.Integer(), nullable=True))
    op.add_column('security_findings', sa.Column('service', sa.String(length=100), nullable=True))
    op.add_column('security_findings', sa.Column('protocol', sa.String(length=20), nullable=True))
    op.add_column('security_findings', sa.Column('cve_id', sa.String(length=20), nullable=True))
    op.add_column('security_findings', sa.Column('cvss_score', sa.Float(), nullable=True))
    op.add_column('security_findings', sa.Column('false_positive', sa.Boolean(), nullable=True))
    op.add_column('security_findings', sa.Column('evidence', sa.JSON(), nullable=True))
    op.add_column('security_findings', sa.Column('additional_data', sa.JSON(), nullable=True))
    op.alter_column('security_findings', 'id',
               existing_type=sa.TEXT(),
               type_=sa.UUID(),
               nullable=False)
    op.alter_column('security_findings', 'scan_id',
               existing_type=sa.TEXT(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('security_findings', 'severity',
               existing_type=sa.TEXT(),
               type_=sa.Enum('LOW', 'MEDIUM', 'HIGH', 'CRITICAL', name='threatseverity'),
               existing_nullable=False)
    op.alter_column('security_findings', 'description',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('security_findings', 'status',
               existing_type=sa.TEXT(),
               type_=sa.String(length=20),
               nullable=True)
    op.alter_column('security_findings', 'created_at',
               existing_type=sa.TEXT(),
               type_=sa.DateTime(timezone=True),
               nullable=True)
    op.alter_column('security_findings', 'updated_at',
               existing_type=sa.TEXT(),
               type_=sa.DateTime(timezone=True),
               nullable=True)
    op.drop_index(op.f('idx_findings_org_id'), table_name='security_findings')
    op.drop_index(op.f('idx_findings_severity'), table_name='security_findings')
    op.drop_index(op.f('idx_findings_status'), table_name='security_findings')
    op.drop_index(op.f('idx_findings_type'), table_name='security_findings')
    op.create_index('idx_finding_cve', 'security_findings', ['cve_id'], unique=False)
    op.create_index('idx_finding_device_id', 'security_findings', ['device_id'], unique=False)
    op.create_index('idx_finding_scan_id', 'security_findings', ['scan_id'], unique=False)
    op.create_index('idx_finding_severity', 'security_findings', ['severity'], unique=False)
    op.create_index('idx_finding_type', 'security_findings', ['finding_type'], unique=False)
    op.create_foreign_key(None, 'security_findings', 'network_devices', ['device_id'], ['id'])
    op.drop_column('security_findings', 'type')
    op.drop_column('security_findings', 'timestamp')
    op.drop_column('security_findings', 'source')
    op.drop_column('security_findings', 'organization_id')
    op.drop_column('security_findings', 'details')
    op.drop_column('security_findings', 'metadata')
    op.add_column('security_scans', sa.Column('config', sa.JSON(), nullable=True))
    op.add_column('security_scans', sa.Column('vulnerabilities_found', sa.Integer(), nullable=True))
    op.add_column('security_scans', sa.Column('duration_seconds', sa.Integer(), nullable=True))
    op.alter_column('security_scans', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.UUID(),
               nullable=False)
    op.alter_column('security_scans', 'organization_id',
               existing_type=sa.TEXT(),
               type_=sa.UUID(),
               nullable=False)
    op.alter_column('security_scans', 'scan_type',
               existing_type=sa.TEXT(),
               type_=sa.String(length=50),
               nullable=False)
    op.alter_column('security_scans', 'target',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               nullable=False)
    op.alter_column('security_scans', 'status',
               existing_type=sa.TEXT(),
               type_=sa.Enum('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', name='scanstatus'),
               existing_nullable=True)
    op.alter_column('security_scans', 'results',
               existing_type=sa.TEXT(),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('security_scans', 'started_at',
               existing_type=sa.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('security_scans', 'completed_at',
               existing_type=sa.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('security_scans', 'created_at',
               existing_type=sa.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.alter_column('security_scans', 'updated_at',
               existing_type=sa.TEXT(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.drop_index(op.f('idx_scans_org_id'), table_name='security_scans')
    op.drop_index(op.f('idx_scans_status'), table_name='security_scans')
    op.drop_index(op.f('idx_scans_type'), table_name='security_scans')
    op.create_index('idx_scan_created', 'security_scans', ['created_at'], unique=False)
    op.create_index('idx_scan_org_id', 'security_scans', ['organization_id'], unique=False)
    op.create_index('idx_scan_status', 'security_scans', ['status'], unique=False)
    op.create_index('idx_scan_type', 'security_scans', ['scan_type'], unique=False)
    op.create_foreign_key(None, 'security_scans', 'organizations', ['organization_id'], ['id'])
    op.drop_column('security_scans', 'type')
    op.drop_column('security_scans', 'end_time')
    op.drop_column('security_scans', 'org_id')
    op.drop_column('security_scans', 'start_time')
    op.drop_column('security_scans', 'metadata')
    op.drop_column('security_scans', 'timestamp')
    op.add_column('user_api_keys', sa.Column('key_hash', sa.String(length=255), nullable=False))
    op.alter_column('user_api_keys', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.UUID(),
               nullable=False)
    op.alter_column('user_api_keys', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(length=100),
               existing_nullable=False)
    op.alter_column('user_api_keys', 'last_used',
               existing_type=sa.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('user_api_keys', 'created_at',
               existing_type=sa.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.alter_column('user_api_keys', 'updated_at',
               existing_type=sa.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.create_index('idx_api_key_hash', 'user_api_keys', ['key_hash'], unique=False)
    op.create_index('idx_api_key_user_id', 'user_api_keys', ['user_id'], unique=False)
    op.drop_column('user_api_keys', 'key')
    op.add_column('users', sa.Column('organization_id', sa.UUID(), nullable=False))
    op.alter_column('users', 'id',
               existing_type=sa.INTEGER(),
               nullable=False,
               autoincrement=True)
    op.alter_column('users', 'username',
               existing_type=sa.TEXT(),
               type_=sa.String(length=50),
               existing_nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.alter_column('users', 'password_hash',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.alter_column('users', 'role',
               existing_type=sa.TEXT(),
               type_=sa.Enum('PLATFORM_OWNER', 'SECURITY_ADMIN', 'SOC_ANALYST', name='userrole'),
               nullable=True,
               existing_server_default=sa.text("'analyst'"))
    op.alter_column('users', 'last_login_attempt',
               existing_type=sa.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('users', 'last_login',
               existing_type=sa.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('users', 'last_logout',
               existing_type=sa.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('users', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=True)
    op.alter_column('users', 'phone',
               existing_type=sa.TEXT(),
               type_=sa.String(length=50),
               existing_nullable=True)
    op.alter_column('users', 'department',
               existing_type=sa.TEXT(),
               type_=sa.String(length=100),
               existing_nullable=True)
    op.alter_column('users', 'title',
               existing_type=sa.TEXT(),
               type_=sa.String(length=100),
               existing_nullable=True)
    op.alter_column('users', 'created_at',
               existing_type=sa.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.alter_column('users', 'updated_at',
               existing_type=sa.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.create_index('idx_user_email', 'users', ['email'], unique=False)
    op.create_index('idx_user_org_id', 'users', ['organization_id'], unique=False)
    op.create_index('idx_user_role', 'users', ['role'], unique=False)
    op.create_index('idx_user_username', 'users', ['username'], unique=False)
    op.create_foreign_key(None, 'users', 'organizations', ['organization_id'], ['id'])
    op.drop_column('users', 'tenant_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('tenant_id', sa.TEXT(), server_default=sa.text("'default'"), nullable=False))
    op.drop_constraint(None, 'users', type_='foreignkey')
    op.drop_index('idx_user_username', table_name='users')
    op.drop_index('idx_user_role', table_name='users')
    op.drop_index('idx_user_org_id', table_name='users')
    op.drop_index('idx_user_email', table_name='users')
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=sa.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=sa.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.alter_column('users', 'title',
               existing_type=sa.String(length=100),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('users', 'department',
               existing_type=sa.String(length=100),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('users', 'phone',
               existing_type=sa.String(length=50),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('users', 'name',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('users', 'last_logout',
               existing_type=sa.DateTime(timezone=True),
               type_=sa.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('users', 'last_login',
               existing_type=sa.DateTime(timezone=True),
               type_=sa.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('users', 'last_login_attempt',
               existing_type=sa.DateTime(timezone=True),
               type_=sa.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('users', 'role',
               existing_type=sa.Enum('PLATFORM_OWNER', 'SECURITY_ADMIN', 'SOC_ANALYST', name='userrole'),
               type_=sa.TEXT(),
               nullable=False,
               existing_server_default=sa.text("'analyst'"))
    op.alter_column('users', 'password_hash',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('users', 'username',
               existing_type=sa.String(length=50),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('users', 'id',
               existing_type=sa.INTEGER(),
               nullable=True,
               autoincrement=True)
    op.drop_column('users', 'organization_id')
    op.add_column('user_api_keys', sa.Column('key', sa.TEXT(), nullable=False))
    op.drop_index('idx_api_key_user_id', table_name='user_api_keys')
    op.drop_index('idx_api_key_hash', table_name='user_api_keys')
    op.alter_column('user_api_keys', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=sa.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.alter_column('user_api_keys', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=sa.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.alter_column('user_api_keys', 'last_used',
               existing_type=sa.DateTime(timezone=True),
               type_=sa.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('user_api_keys', 'name',
               existing_type=sa.String(length=100),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('user_api_keys', 'id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               nullable=True)
    op.drop_column('user_api_keys', 'key_hash')
    op.add_column('security_scans', sa.Column('timestamp', sa.TEXT(), nullable=True))
    op.add_column('security_scans', sa.Column('metadata', sa.TEXT(), nullable=True))
    op.add_column('security_scans', sa.Column('start_time', sa.TEXT(), nullable=True))
    op.add_column('security_scans', sa.Column('org_id', sa.TEXT(), nullable=True))
    op.add_column('security_scans', sa.Column('end_time', sa.TEXT(), nullable=True))
    op.add_column('security_scans', sa.Column('type', sa.TEXT(), nullable=True))
    op.drop_constraint(None, 'security_scans', type_='foreignkey')
    op.drop_index('idx_scan_type', table_name='security_scans')
    op.drop_index('idx_scan_status', table_name='security_scans')
    op.drop_index('idx_scan_org_id', table_name='security_scans')
    op.drop_index('idx_scan_created', table_name='security_scans')
    op.create_index(op.f('idx_scans_type'), 'security_scans', ['type'], unique=False)
    op.create_index(op.f('idx_scans_status'), 'security_scans', ['status'], unique=False)
    op.create_index(op.f('idx_scans_org_id'), 'security_scans', ['organization_id'], unique=False)
    op.alter_column('security_scans', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('security_scans', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=sa.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.alter_column('security_scans', 'completed_at',
               existing_type=sa.DateTime(timezone=True),
               type_=sa.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('security_scans', 'started_at',
               existing_type=sa.DateTime(timezone=True),
               type_=sa.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('security_scans', 'results',
               existing_type=sa.JSON(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('security_scans', 'status',
               existing_type=sa.Enum('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', name='scanstatus'),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('security_scans', 'target',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               nullable=True)
    op.alter_column('security_scans', 'scan_type',
               existing_type=sa.String(length=50),
               type_=sa.TEXT(),
               nullable=True)
    op.alter_column('security_scans', 'organization_id',
               existing_type=sa.UUID(),
               type_=sa.TEXT(),
               nullable=True)
    op.alter_column('security_scans', 'id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               nullable=True)
    op.drop_column('security_scans', 'duration_seconds')
    op.drop_column('security_scans', 'vulnerabilities_found')
    op.drop_column('security_scans', 'config')
    op.add_column('security_findings', sa.Column('metadata', sa.TEXT(), nullable=True))
    op.add_column('security_findings', sa.Column('details', sa.TEXT(), nullable=True))
    op.add_column('security_findings', sa.Column('organization_id', sa.TEXT(), nullable=True))
    op.add_column('security_findings', sa.Column('source', sa.TEXT(), server_default=sa.text("'system'"), nullable=False))
    op.add_column('security_findings', sa.Column('timestamp', sa.TEXT(), nullable=False))
    op.add_column('security_findings', sa.Column('type', sa.TEXT(), nullable=False))
    op.drop_constraint(None, 'security_findings', type_='foreignkey')
    op.drop_index('idx_finding_type', table_name='security_findings')
    op.drop_index('idx_finding_severity', table_name='security_findings')
    op.drop_index('idx_finding_scan_id', table_name='security_findings')
    op.drop_index('idx_finding_device_id', table_name='security_findings')
    op.drop_index('idx_finding_cve', table_name='security_findings')
    op.create_index(op.f('idx_findings_type'), 'security_findings', ['type'], unique=False)
    op.create_index(op.f('idx_findings_status'), 'security_findings', ['status'], unique=False)
    op.create_index(op.f('idx_findings_severity'), 'security_findings', ['severity'], unique=False)
    op.create_index(op.f('idx_findings_org_id'), 'security_findings', ['organization_id'], unique=False)
    op.alter_column('security_findings', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=sa.TEXT(),
               nullable=False)
    op.alter_column('security_findings', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=sa.TEXT(),
               nullable=False)
    op.alter_column('security_findings', 'status',
               existing_type=sa.String(length=20),
               type_=sa.TEXT(),
               nullable=False)
    op.alter_column('security_findings', 'description',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('security_findings', 'severity',
               existing_type=sa.Enum('LOW', 'MEDIUM', 'HIGH', 'CRITICAL', name='threatseverity'),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('security_findings', 'scan_id',
               existing_type=sa.UUID(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('security_findings', 'id',
               existing_type=sa.UUID(),
               type_=sa.TEXT(),
               nullable=True)
    op.drop_column('security_findings', 'additional_data')
    op.drop_column('security_findings', 'evidence')
    op.drop_column('security_findings', 'false_positive')
    op.drop_column('security_findings', 'cvss_score')
    op.drop_column('security_findings', 'cve_id')
    op.drop_column('security_findings', 'protocol')
    op.drop_column('security_findings', 'service')
    op.drop_column('security_findings', 'port')
    op.drop_column('security_findings', 'title')
    op.drop_column('security_findings', 'finding_type')
    op.drop_column('security_findings', 'device_id')
    op.add_column('organizations', sa.Column('trial_ends_at', sa.TEXT(), nullable=True))
    op.add_column('organizations', sa.Column('stripe_subscription_id', sa.TEXT(), nullable=True))
    op.add_column('organizations', sa.Column('billing_email', sa.TEXT(), nullable=True))
    op.add_column('organizations', sa.Column('stripe_customer_id', sa.TEXT(), nullable=True))
    op.drop_index('idx_org_status', table_name='organizations')
    op.drop_index('idx_org_api_key', table_name='organizations')
    op.create_index(op.f('idx_organizations_owner_email'), 'organizations', ['owner_email'], unique=False)
    op.create_index(op.f('idx_organizations_api_key'), 'organizations', ['api_key'], unique=False)
    op.alter_column('organizations', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=sa.TEXT(),
               nullable=False)
    op.alter_column('organizations', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=sa.TEXT(),
               nullable=False)
    op.alter_column('organizations', 'api_key',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('organizations', 'plan_type',
               existing_type=sa.Enum('FREE', 'PRO', 'ENTERPRISE', name='plantype'),
               type_=sa.TEXT(),
               nullable=False,
               existing_server_default=sa.text("'free'"))
    op.alter_column('organizations', 'status',
               existing_type=sa.Enum('ACTIVE', 'SUSPENDED', 'TRIAL', 'EXPIRED', name='organizationstatus'),
               type_=sa.TEXT(),
               nullable=False,
               existing_server_default=sa.text("'trial'"))
    op.alter_column('organizations', 'owner_email',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('organizations', 'name',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('organizations', 'id',
               existing_type=sa.UUID(),
               type_=sa.TEXT(),
               nullable=True)
    op.add_column('notifications', sa.Column('metadata', sa.TEXT(), nullable=True))
    op.add_column('notifications', sa.Column('read', sa.BOOLEAN(), server_default=sa.text('0'), nullable=False))
    op.drop_constraint(None, 'notifications', type_='foreignkey')
    op.drop_constraint(None, 'notifications', type_='foreignkey')
    op.drop_index('idx_notification_user_id', table_name='notifications')
    op.drop_index('idx_notification_unread', table_name='notifications')
    op.drop_index('idx_notification_org_id', table_name='notifications')
    op.drop_index('idx_notification_created', table_name='notifications')
    op.drop_index('idx_notification_category', table_name='notifications')
    op.create_index(op.f('idx_notifications_user_id'), 'notifications', ['user_id'], unique=False)
    op.create_index(op.f('idx_notifications_org_id'), 'notifications', ['organization_id'], unique=False)
    op.alter_column('notifications', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=sa.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.alter_column('notifications', 'read_at',
               existing_type=sa.DateTime(timezone=True),
               type_=sa.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('notifications', 'severity',
               existing_type=sa.String(length=20),
               type_=sa.TEXT(),
               nullable=False,
               existing_server_default=sa.text("'info'"))
    op.alter_column('notifications', 'category',
               existing_type=sa.String(length=50),
               type_=sa.TEXT(),
               nullable=False,
               existing_server_default=sa.text("'system'"))
    op.alter_column('notifications', 'title',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('notifications', 'organization_id',
               existing_type=sa.UUID(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('notifications', 'id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               nullable=True)
    op.drop_column('notifications', 'expires_at')
    op.drop_column('notifications', 'action_url')
    op.drop_column('notifications', 'additional_data')
    op.drop_column('notifications', 'is_read')
    op.add_column('network_devices', sa.Column('hostname', sa.TEXT(), nullable=True))
    op.add_column('network_devices', sa.Column('org_id', sa.TEXT(), nullable=True))
    op.add_column('network_devices', sa.Column('metadata', sa.TEXT(), nullable=True))
    op.add_column('network_devices', sa.Column('type', sa.TEXT(), nullable=True))
    op.drop_constraint(None, 'network_devices', type_='foreignkey')
    op.drop_constraint('uq_org_device_ip', 'network_devices', type_='unique')
    op.drop_index('idx_device_status', table_name='network_devices')
    op.drop_index('idx_device_org_id', table_name='network_devices')
    op.drop_index('idx_device_mac', table_name='network_devices')
    op.drop_index('idx_device_ip', table_name='network_devices')
    op.create_index(op.f('idx_devices_type'), 'network_devices', ['type'], unique=False)
    op.create_index(op.f('idx_devices_status'), 'network_devices', ['status'], unique=False)
    op.create_index(op.f('idx_devices_org_id'), 'network_devices', ['organization_id'], unique=False)
    op.alter_column('network_devices', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=sa.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('network_devices', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=sa.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.alter_column('network_devices', 'last_seen',
               existing_type=sa.DateTime(timezone=True),
               type_=sa.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('network_devices', 'status',
               existing_type=sa.String(length=20),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('network_devices', 'device_type',
               existing_type=sa.String(length=50),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('network_devices', 'mac_address',
               existing_type=sa.String(length=17),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('network_devices', 'ip_address',
               existing_type=sa.String(length=45),
               type_=sa.TEXT(),
               nullable=True)
    op.alter_column('network_devices', 'name',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('network_devices', 'organization_id',
               existing_type=sa.UUID(),
               type_=sa.TEXT(),
               nullable=True)
    op.alter_column('network_devices', 'id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               nullable=True)
    op.drop_column('network_devices', 'risk_score')
    op.drop_column('network_devices', 'vulnerabilities')
    op.drop_column('network_devices', 'services')
    op.drop_column('network_devices', 'open_ports')
    op.drop_column('network_devices', 'response_time')
    op.drop_column('network_devices', 'is_online')
    op.drop_column('network_devices', 'os_info')
    op.drop_column('network_devices', 'model')
    op.drop_column('network_devices', 'vendor')
    op.add_column('ml_models', sa.Column('organization_id', sa.TEXT(), nullable=True))
    op.add_column('ml_models', sa.Column('updated_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True))
    op.add_column('ml_models', sa.Column('type', sa.TEXT(), nullable=False))
    op.drop_constraint('uq_model_name_version', 'ml_models', type_='unique')
    op.drop_index('idx_model_type', table_name='ml_models')
    op.drop_index('idx_model_status', table_name='ml_models')
    op.drop_index('idx_model_name_version', table_name='ml_models')
    op.create_index(op.f('idx_ml_models_org_id'), 'ml_models', ['organization_id'], unique=False)
    op.alter_column('ml_models', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=sa.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.alter_column('ml_models', 'accuracy',
               existing_type=sa.Float(),
               type_=sa.REAL(),
               existing_nullable=True)
    op.alter_column('ml_models', 'status',
               existing_type=sa.String(length=20),
               type_=sa.TEXT(),
               nullable=False,
               existing_server_default=sa.text("'training'"))
    op.alter_column('ml_models', 'name',
               existing_type=sa.String(length=100),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('ml_models', 'id',
               existing_type=sa.UUID(),
               type_=sa.TEXT(),
               nullable=True)
    op.drop_column('ml_models', 'deployed_at')
    op.drop_column('ml_models', 'trained_at')
    op.drop_column('ml_models', 'metrics')
    op.drop_column('ml_models', 'training_data_info')
    op.drop_column('ml_models', 'hyperparameters')
    op.drop_column('ml_models', 'mlflow_model_uri')
    op.drop_column('ml_models', 'mlflow_run_id')
    op.drop_column('ml_models', 'f1_score')
    op.drop_column('ml_models', 'recall')
    op.drop_column('ml_models', 'precision')
    op.drop_column('ml_models', 'model_type')
    op.drop_column('ml_models', 'version')
    op.create_table('network_connections',
    sa.Column('id', sa.TEXT(), nullable=True),
    sa.Column('source_device_id', sa.TEXT(), nullable=False),
    sa.Column('source_device', sa.TEXT(), nullable=False),
    sa.Column('target_device_id', sa.TEXT(), nullable=False),
    sa.Column('target_device', sa.TEXT(), nullable=False),
    sa.Column('protocol', sa.TEXT(), nullable=False),
    sa.Column('port', sa.INTEGER(), nullable=True),
    sa.Column('status', sa.TEXT(), server_default=sa.text("'active'"), nullable=True),
    sa.Column('last_seen', sa.TEXT(), nullable=False),
    sa.Column('metadata', sa.TEXT(), nullable=True),
    sa.Column('created_at', sa.TEXT(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.TEXT(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_activity_log',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('user_id', sa.INTEGER(), nullable=False),
    sa.Column('action', sa.TEXT(), nullable=False),
    sa.Column('ip_address', sa.TEXT(), nullable=False),
    sa.Column('user_agent', sa.TEXT(), nullable=True),
    sa.Column('timestamp', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('anomalies',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('device_id', sa.INTEGER(), nullable=True),
    sa.Column('anomaly_type', sa.TEXT(), nullable=True),
    sa.Column('severity', sa.TEXT(), nullable=True),
    sa.Column('description', sa.TEXT(), nullable=True),
    sa.Column('detected_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('resolved_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('org_id', sa.TEXT(), nullable=True),
    sa.Column('source', sa.TEXT(), server_default=sa.text("'system'"), nullable=False),
    sa.Column('metadata', sa.TEXT(), nullable=True),
    sa.Column('organization_id', sa.TEXT(), nullable=True),
    sa.Column('evidence', sa.TEXT(), nullable=True),
    sa.Column('resolution', sa.TEXT(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('timestamp', sa.TEXT(), nullable=True),
    sa.Column('status', sa.TEXT(), server_default=sa.text("'open'"), nullable=True),
    sa.Column('updated_at', sa.TEXT(), nullable=True),
    sa.Column('type', sa.TEXT(), nullable=True),
    sa.ForeignKeyConstraint(['device_id'], ['network_devices.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('idx_anomalies_type'), 'anomalies', ['type'], unique=False)
    op.create_index(op.f('idx_anomalies_timestamp'), 'anomalies', ['timestamp'], unique=False)
    op.create_index(op.f('idx_anomalies_status'), 'anomalies', ['status'], unique=False)
    op.create_index(op.f('idx_anomalies_severity'), 'anomalies', ['severity'], unique=False)
    op.create_index(op.f('idx_anomalies_org_id'), 'anomalies', ['organization_id'], unique=False)
    op.create_table('ml_training_sessions',
    sa.Column('id', sa.TEXT(), nullable=True),
    sa.Column('organization_id', sa.TEXT(), nullable=True),
    sa.Column('model_id', sa.TEXT(), nullable=False),
    sa.Column('data_size', sa.INTEGER(), nullable=False),
    sa.Column('accuracy', sa.REAL(), nullable=True),
    sa.Column('training_time', sa.REAL(), nullable=True),
    sa.Column('status', sa.TEXT(), server_default=sa.text("'running'"), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('completed_at', sa.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('idx_ml_training_sessions_org_id'), 'ml_training_sessions', ['organization_id'], unique=False)
    op.create_table('tenants',
    sa.Column('id', sa.TEXT(), nullable=True),
    sa.Column('name', sa.TEXT(), nullable=False),
    sa.Column('settings', sa.TEXT(), nullable=True),
    sa.Column('encryption_key_id', sa.TEXT(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('settings',
    sa.Column('key', sa.TEXT(), nullable=True),
    sa.Column('value', sa.TEXT(), nullable=False),
    sa.Column('updated_at', sa.TEXT(), nullable=False),
    sa.PrimaryKeyConstraint('key')
    )
    op.create_table('logs',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('timestamp', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('level', sa.TEXT(), nullable=True),
    sa.Column('message', sa.TEXT(), nullable=True),
    sa.Column('source', sa.TEXT(), nullable=True),
    sa.Column('user_id', sa.INTEGER(), nullable=True),
    sa.Column('org_id', sa.TEXT(), nullable=True),
    sa.Column('metadata', sa.TEXT(), nullable=True),
    sa.Column('organization_id', sa.TEXT(), nullable=True),
    sa.Column('category', sa.TEXT(), server_default=sa.text("'system'"), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('idx_logs_timestamp'), 'logs', ['timestamp'], unique=False)
    op.create_index(op.f('idx_logs_source'), 'logs', ['source'], unique=False)
    op.create_index(op.f('idx_logs_org_id'), 'logs', ['organization_id'], unique=False)
    op.create_index(op.f('idx_logs_level'), 'logs', ['level'], unique=False)
    op.create_index(op.f('idx_logs_category'), 'logs', ['category'], unique=False)
    op.create_table('device_vulnerabilities',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('organization_id', sa.TEXT(), nullable=True),
    sa.Column('device_id', sa.INTEGER(), nullable=True),
    sa.Column('cve_id', sa.TEXT(), nullable=False),
    sa.Column('status', sa.TEXT(), server_default=sa.text("'open'"), nullable=False),
    sa.Column('detected_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('resolved_at', sa.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('idx_device_vulnerabilities_org_id'), 'device_vulnerabilities', ['organization_id'], unique=False)
    op.create_table('cve_data',
    sa.Column('id', sa.TEXT(), nullable=True),
    sa.Column('description', sa.TEXT(), nullable=False),
    sa.Column('severity', sa.TEXT(), nullable=False),
    sa.Column('score', sa.REAL(), nullable=True),
    sa.Column('published_date', sa.TEXT(), nullable=True),
    sa.Column('modified_date', sa.TEXT(), nullable=True),
    sa.Column('reference_urls', sa.TEXT(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('network_traffic',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('timestamp', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('source_ip', sa.TEXT(), nullable=False),
    sa.Column('dest_ip', sa.TEXT(), nullable=False),
    sa.Column('protocol', sa.TEXT(), nullable=False),
    sa.Column('bytes_in', sa.INTEGER(), server_default=sa.text('0'), nullable=True),
    sa.Column('bytes_out', sa.INTEGER(), server_default=sa.text('0'), nullable=True),
    sa.Column('packets_in', sa.INTEGER(), server_default=sa.text('0'), nullable=True),
    sa.Column('packets_out', sa.INTEGER(), server_default=sa.text('0'), nullable=True),
    sa.Column('metadata', sa.TEXT(), nullable=True),
    sa.Column('organization_id', sa.TEXT(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('idx_traffic_timestamp'), 'network_traffic', ['timestamp'], unique=False)
    op.create_index(op.f('idx_traffic_protocol'), 'network_traffic', ['protocol'], unique=False)
    op.create_index(op.f('idx_traffic_org_id'), 'network_traffic', ['organization_id'], unique=False)
    op.create_table('user_sessions',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('user_id', sa.INTEGER(), nullable=False),
    sa.Column('device', sa.TEXT(), nullable=True),
    sa.Column('browser', sa.TEXT(), nullable=True),
    sa.Column('location', sa.TEXT(), nullable=True),
    sa.Column('ip_address', sa.TEXT(), nullable=False),
    sa.Column('is_current', sa.BOOLEAN(), server_default=sa.text('0'), nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('1'), nullable=True),
    sa.Column('last_active', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('org_users',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('user_id', sa.INTEGER(), nullable=True),
    sa.Column('org_id', sa.TEXT(), nullable=True),
    sa.Column('role', sa.TEXT(), server_default=sa.text("'analyst'"), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('organization_id', sa.TEXT(), nullable=True),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('idx_org_users_user_id'), 'org_users', ['user_id'], unique=False)
    op.create_index(op.f('idx_org_users_org_id'), 'org_users', ['organization_id'], unique=False)
    op.create_table('billing_usage',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('organization_id', sa.TEXT(), nullable=False),
    sa.Column('month', sa.TEXT(), nullable=False),
    sa.Column('device_count', sa.INTEGER(), server_default=sa.text('0'), nullable=True),
    sa.Column('scan_count', sa.INTEGER(), server_default=sa.text('0'), nullable=True),
    sa.Column('log_count', sa.INTEGER(), server_default=sa.text('0'), nullable=True),
    sa.Column('api_requests', sa.INTEGER(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('organization_id', 'month')
    )
    op.create_index(op.f('idx_billing_usage_org_id'), 'billing_usage', ['organization_id'], unique=False)
    op.create_index(op.f('idx_billing_usage_month'), 'billing_usage', ['month'], unique=False)
    op.drop_index('idx_audit_user_id', table_name='audit_logs')
    op.drop_index('idx_audit_timestamp', table_name='audit_logs')
    op.drop_index('idx_audit_resource', table_name='audit_logs')
    op.drop_index('idx_audit_org_id', table_name='audit_logs')
    op.drop_index('idx_audit_action', table_name='audit_logs')
    op.drop_table('audit_logs')
    op.drop_index('idx_threat_type', table_name='threat_detections')
    op.drop_index('idx_threat_target_ip', table_name='threat_detections')
    op.drop_index('idx_threat_source_ip', table_name='threat_detections')
    op.drop_index('idx_threat_severity', table_name='threat_detections')
    op.drop_index('idx_threat_org_id', table_name='threat_detections')
    op.drop_index('idx_threat_detected', table_name='threat_detections')
    op.drop_table('threat_detections')
    op.drop_index('idx_log_timestamp', table_name='system_logs')
    op.drop_index('idx_log_source', table_name='system_logs')
    op.drop_index('idx_log_org_id', table_name='system_logs')
    op.drop_index('idx_log_level', table_name='system_logs')
    op.drop_index('idx_log_category', table_name='system_logs')
    op.drop_table('system_logs')
    # ### end Alembic commands ###

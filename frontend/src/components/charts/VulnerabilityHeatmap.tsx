import React, { useMemo } from 'react';
import { BaseChart } from './BaseChart';

interface VulnerabilityData {
  device: string;
  category: string;
  count: number;
  severity: 'critical' | 'high' | 'medium' | 'low';
}

interface VulnerabilityHeatmapProps {
  data?: VulnerabilityData[];
  height?: number;
  className?: string;
  loading?: boolean;
  error?: string;
  hideTitle?: boolean;
}

// Mock data for demonstration
const mockVulnerabilityData: VulnerabilityData[] = [
  { device: 'Web Server', category: 'SQL Injection', count: 5, severity: 'critical' },
  { device: 'Web Server', category: 'XSS', count: 8, severity: 'high' },
  { device: 'Web Server', category: 'CSRF', count: 3, severity: 'medium' },
  { device: 'Web Server', category: 'Info Disclosure', count: 2, severity: 'low' },
  
  { device: 'Database', category: 'SQL Injection', count: 2, severity: 'high' },
  { device: 'Database', category: 'XSS', count: 0, severity: 'low' },
  { device: 'Database', category: 'CSRF', count: 1, severity: 'medium' },
  { device: 'Database', category: 'Info Disclosure', count: 4, severity: 'medium' },
  
  { device: 'Router', category: 'SQL Injection', count: 0, severity: 'low' },
  { device: 'Router', category: 'XSS', count: 1, severity: 'low' },
  { device: 'Router', category: 'CSRF', count: 2, severity: 'medium' },
  { device: 'Router', category: 'Info Disclosure', count: 6, severity: 'high' },
  
  { device: 'Firewall', category: 'SQL Injection', count: 0, severity: 'low' },
  { device: 'Firewall', category: 'XSS', count: 0, severity: 'low' },
  { device: 'Firewall', category: 'CSRF', count: 1, severity: 'low' },
  { device: 'Firewall', category: 'Info Disclosure', count: 3, severity: 'medium' },
  
  { device: 'Workstation', category: 'SQL Injection', count: 1, severity: 'medium' },
  { device: 'Workstation', category: 'XSS', count: 4, severity: 'medium' },
  { device: 'Workstation', category: 'CSRF', count: 7, severity: 'high' },
  { device: 'Workstation', category: 'Info Disclosure', count: 2, severity: 'low' },
];

export const VulnerabilityHeatmap: React.FC<VulnerabilityHeatmapProps> = ({
  data = mockVulnerabilityData,
  height = 400,
  className = '',
  loading = false,
  error,
  hideTitle = false
}) => {
  const validData = useMemo(() => {
    // Ensure we always have valid data
    return data && data.length > 0 ? data : mockVulnerabilityData;
  }, [data]);

  const maxCount = useMemo(() => {
    return Math.max(...validData.map(d => d.count), 1);
  }, [validData]);

  const devices = useMemo(() => [...new Set(validData.map(d => d.device))], [validData]);
  const categories = useMemo(() => [...new Set(validData.map(d => d.category))], [validData]);

  const getIntensityColor = (count: number) => {
    const intensity = count / maxCount;
    if (count === 0) return 'bg-gray-100';
    if (intensity <= 0.25) return 'bg-green-200';
    if (intensity <= 0.5) return 'bg-yellow-300';
    if (intensity <= 0.75) return 'bg-orange-400';
    return 'bg-red-500';
  };

  const getTextColor = (count: number) => {
    const intensity = count / maxCount;
    return intensity > 0.5 ? 'text-white' : 'text-gray-800';
  };

  // Don't render if we don't have valid data
  if (validData.length === 0) {
    return (
      <BaseChart
        title={hideTitle ? undefined : "Vulnerability Heatmap"}
        subtitle={hideTitle ? undefined : "CVE risk assessment across devices and vulnerability categories"}
        height={height}
        className={className}
        loading={loading}
        error={error || "No vulnerability data available"}
      >
        <div className="flex items-center justify-center h-full text-gray-500">
          <div className="text-center">
            <div className="text-lg mb-2">ðŸ“Š</div>
            <div>No vulnerability data to display</div>
          </div>
        </div>
      </BaseChart>
    );
  }

  // If hideTitle is true, render the heatmap directly without BaseChart wrapper
  if (hideTitle) {
    if (loading) {
      return (
        <div className="flex items-center justify-center" style={{ height }}>
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
        </div>
      );
    }

    if (error) {
      return (
        <div className="flex items-center justify-center" style={{ height }}>
          <div className="text-center">
            <div className="text-red-400 mb-2">
              <svg className="w-12 h-12 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
              </svg>
            </div>
            <p className="text-sm text-gray-400">{error}</p>
          </div>
        </div>
      );
    }

    if (validData.length === 0) {
      return (
        <div className="flex items-center justify-center h-full text-gray-500" style={{ height }}>
          <div className="text-center">
            <div className="text-lg mb-2">ðŸ“Š</div>
            <div>No vulnerability data to display</div>
          </div>
        </div>
      );
    }

    return (
      <div style={{ height }} className="p-4">
        <div className="overflow-x-auto">
          <div className="inline-block min-w-full">
            {/* Header */}
            <div className="grid gap-1 mb-2" style={{ gridTemplateColumns: `150px repeat(${categories.length}, 1fr)` }}>
              <div className="p-2 text-sm font-medium text-gray-400"></div>
              {categories.map(category => (
                <div key={category} className="p-2 text-xs font-medium text-gray-400 text-center">
                  {category}
                </div>
              ))}
            </div>
            
            {/* Heatmap Grid */}
            {devices.map(device => (
              <div key={device} className="grid gap-1 mb-1" style={{ gridTemplateColumns: `150px repeat(${categories.length}, 1fr)` }}>
                <div className="p-2 text-sm font-medium text-gray-300 flex items-center">
                  {device}
                </div>
                {categories.map(category => {
                  const vuln = validData.find(d => d.device === device && d.category === category);
                  const count = vuln ? vuln.count : 0;
                  return (
                    <div
                      key={`${device}-${category}`}
                      className={`p-3 text-center text-sm font-medium rounded transition-all duration-200 hover:scale-105 cursor-pointer ${getIntensityColor(count)} ${getTextColor(count)}`}
                      title={`${device} - ${category}: ${count} vulnerabilities${vuln ? ` (${vuln.severity})` : ''}`}
                    >
                      {count}
                    </div>
                  );
                })}
              </div>
            ))}
            
            {/* Legend */}
            <div className="mt-6 flex items-center justify-center gap-4">
              <span className="text-sm text-gray-400">Vulnerability Count:</span>
              <div className="flex items-center gap-2">
                <div className="flex items-center gap-1">
                  <div className="w-4 h-4 bg-gray-100 rounded"></div>
                  <span className="text-xs text-gray-400">0</span>
                </div>
                <div className="flex items-center gap-1">
                  <div className="w-4 h-4 bg-green-200 rounded"></div>
                  <span className="text-xs text-gray-400">Low</span>
                </div>
                <div className="flex items-center gap-1">
                  <div className="w-4 h-4 bg-yellow-300 rounded"></div>
                  <span className="text-xs text-gray-400">Medium</span>
                </div>
                <div className="flex items-center gap-1">
                  <div className="w-4 h-4 bg-orange-400 rounded"></div>
                  <span className="text-xs text-gray-400">High</span>
                </div>
                <div className="flex items-center gap-1">
                  <div className="w-4 h-4 bg-red-500 rounded"></div>
                  <span className="text-xs text-gray-400">Critical</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <BaseChart
      title={hideTitle ? undefined : "Vulnerability Heatmap"}
      subtitle={hideTitle ? undefined : "CVE risk assessment across devices and vulnerability categories"}
      height={height}
      className={className}
      loading={loading}
      error={error}
    >
      <div className="p-4">
        <div className="overflow-x-auto">
          <div className="inline-block min-w-full">
            {/* Header */}
            <div className="grid gap-1 mb-2" style={{ gridTemplateColumns: `150px repeat(${categories.length}, 1fr)` }}>
              <div className="p-2 text-sm font-medium text-gray-600"></div>
              {categories.map(category => (
                <div key={category} className="p-2 text-xs font-medium text-gray-600 text-center">
                  {category}
                </div>
              ))}
            </div>
            
            {/* Heatmap Grid */}
            {devices.map(device => (
              <div key={device} className="grid gap-1 mb-1" style={{ gridTemplateColumns: `150px repeat(${categories.length}, 1fr)` }}>
                <div className="p-2 text-sm font-medium text-gray-800 flex items-center">
                  {device}
                </div>
                {categories.map(category => {
                  const vuln = validData.find(d => d.device === device && d.category === category);
                  const count = vuln ? vuln.count : 0;
                  return (
                    <div
                      key={`${device}-${category}`}
                      className={`p-3 text-center text-sm font-medium rounded transition-all duration-200 hover:scale-105 cursor-pointer ${getIntensityColor(count)} ${getTextColor(count)}`}
                      title={`${device} - ${category}: ${count} vulnerabilities${vuln ? ` (${vuln.severity})` : ''}`}
                    >
                      {count}
                    </div>
                  );
                })}
              </div>
            ))}
            
            {/* Legend */}
            <div className="mt-6 flex items-center justify-center gap-4">
              <span className="text-sm text-gray-600">Vulnerability Count:</span>
              <div className="flex items-center gap-2">
                <div className="flex items-center gap-1">
                  <div className="w-4 h-4 bg-gray-100 rounded"></div>
                  <span className="text-xs text-gray-600">0</span>
                </div>
                <div className="flex items-center gap-1">
                  <div className="w-4 h-4 bg-green-200 rounded"></div>
                  <span className="text-xs text-gray-600">Low</span>
                </div>
                <div className="flex items-center gap-1">
                  <div className="w-4 h-4 bg-yellow-300 rounded"></div>
                  <span className="text-xs text-gray-600">Medium</span>
                </div>
                <div className="flex items-center gap-1">
                  <div className="w-4 h-4 bg-orange-400 rounded"></div>
                  <span className="text-xs text-gray-600">High</span>
                </div>
                <div className="flex items-center gap-1">
                  <div className="w-4 h-4 bg-red-500 rounded"></div>
                  <span className="text-xs text-gray-600">Critical</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </BaseChart>
  );
};

export default VulnerabilityHeatmap; 